<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalproject.team4.shouldbe.mapper.ReplyMapper">
    <select id="replyList" resultType="BoardReplyVO">
        select c.comment_id,
               c.user_id                              as writer,
               post_id,
               content,
               date_format(write_date, '%m-%d %H:%i') as write_date,
               is_deleted,
               depth,
               target_parent,
               count(l.user_id)                       as 'like',
               CASE WHEN EXISTS (
                SELECT 1
                FROM comment_like cl
                WHERE cl.comment_id = c.comment_id
                AND cl.user_id = #{param2}
                ) THEN 1 ELSE 0 END AS myLike
    FROM comments c
    LEFT JOIN comment_like l ON c.comment_id = l.comment_id
    WHERE post_id = #{param1}
        GROUP BY c.comment_id
        ORDER BY target_parent asc, write_date asc;
    </select>
    <insert id="addReply" useGeneratedKeys="true" keyProperty="comment_id">
        insert into comments(user_id, post_id, content, target_parent) values(#{writer}, #{post_id}, #{content},0)
    </insert>
    <update id="updateTargetParent">
        UPDATE comments
        SET target_parent = #{comment_id}
        WHERE comment_id = #{comment_id}
    </update>
    <insert id="addReplyReply">
        insert into comments(user_id, post_id, content,target_parent,depth) values(#{userId}, #{postId}, #{content},#{commentId},1)
    </insert>
    <select id="selectReply" resultType="BoardReplyVO">
        select comment_id,
               user_id as writer,
               post_id,
               content,
               date_format(write_date, '%m-%d %H:%i') as write_date,
               is_deleted
        from comments
        where post_id = #{param1} and comment_id = #{param2}
    </select>
    <update id="deleteReply">
        update comments
        set is_deleted=1
        where post_id=#{param1} and comment_id = #{param2}
    </update>
    <insert id="report">
        INSERT INTO comment_report(comment_id, user_id)
        SELECT #{param1}, #{param2}
            WHERE NOT EXISTS (
        SELECT 1 FROM comment_report
        WHERE comment_id = #{param1} AND user_id = #{param2}
                );
    </insert>
    <select id="like" resultType="int">
        SELECT COUNT(*)
        FROM comment_like
        WHERE comment_id = #{param1} AND user_id = #{param2}
    </select>

    <delete id="decreaseLike">
        delete from comment_like where comment_id=#{param1} and user_id=#{param2}
    </delete>

    <insert id="increaseLike">
        insert into comment_like(comment_id, user_id)
        SELECT #{param1}, #{param2}
            WHERE NOT EXISTS (
        SELECT 1 FROM comment_like
        WHERE comment_id = #{param1} AND user_id = #{param2}
                );
    </insert>
    <update id="updateComment">
        UPDATE comments
        SET content = #{content}
        WHERE post_id = #{postId}
          AND comment_id = #{commentId}
          AND user_id = #{userId}
    </update>
</mapper>

