<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalproject.team4.shouldbe.mapper.MypageMapper">
    <select id="selectChatId" resultType="FriendVO">
        SELECT chat_id,from_id,to_id
        FROM chat_list
        WHERE (from_id =#{followed_userid} and to_id = #{following_user_id}) or (from_id =#{following_user_id} and to_id = #{followed_userid});
    </select>

    <select id="mypage_info" resultType="MypageVO">
        select user_id, password, lang, profile_content, salt, profile_img, nation, user_name, email
        from users
        where user_id = #{param1};
    </select>

    <update id="mypage_edit">
        UPDATE users
        SET profile_content = #{profile_content},
        lang = #{lang},
        password = #{password}
        WHERE user_id = #{user_id};
    </update>


    <select id="mypage_post_board" resultType="BoardVO">
        select post_id, user_id, title, board_cat,date_format(write_date, '%y-%m-%d') write_date
        from posts
        where user_id = #{user_id}
        ORDER BY post_id desc
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <select id="countBoard" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM posts
        WHERE user_id = #{user_id}
    </select>

    <select id="mypage_post_board_reply" resultType="BoardReplyVO">
        select
            c.comment_id,
            c.post_id,
            c.user_id as comment_user_id,
            c.content,
            date_format(c.write_date, '%y-%m-%d') as write_date,
            p.board_cat,
            p.title
        from
            comments c
                inner join
            posts p on c.post_id = p.post_id
        where
            c.user_id = #{user_id} and c.is_deleted = 0
        ORDER BY c.post_id asc
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <select id="countReply" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM comments
        WHERE user_id = #{user_id}
    </select>

    <select id="countSaveMessages" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM save_message
        WHERE save_user_id = #{userid}
    </select>

    <select id="selectSaveMessages" parameterType="map" resultType="SaveMessageVO">
        SELECT
            sm.msg_id,
            sm.save_user_id,
            sm.content,
            m.chat_id,
            cl.from_id,
            cl.to_id
        FROM
            save_message sm
                JOIN
            message m ON sm.msg_id = m.msg_id
                JOIN
            chat_list cl ON m.chat_id = cl.chat_id
        WHERE
            sm.save_user_id = #{userid}
        ORDER BY
            sm.msg_id
            LIMIT
            #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <select id="countfriendList" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM friend
        WHERE followed_user_id = #{user_id}
    </select>

    <select id="friendList" resultType="FriendVO">
        select user_name, profile_content, profile_img, following_user_id, followed_user_id
        from users as u
                 join friend as f on u.user_id = f.following_user_id
        where followed_user_id = #{followed_user_id}
        ORDER BY followed_user_id
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <delete id="friendDelete">
        delete
        from friend
        where followed_user_id = #{param1}
          and following_user_id = #{param2}
    </delete>

    <select id="countblockList" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM block_list
        WHERE user_id = #{user+id}
    </select>

    <select id="blockList" resultType="BlockVO">
        select block_id, b.user_id, block_reason, user_name, profile_img
        from users as u
                 join block_list as b on u.user_id = b.block_id
        where b.user_id = #{user_id}
        ORDER BY block_id
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <delete id="block_id_unlock">
        delete
        from block_list
        where block_id = #{param1}
          and user_id = #{param2}
    </delete>

    <insert id="withdraw_user_date">
        insert into withdrawn_users (user_id)
        values (#{user_id})
    </insert>

    <update id="withdraw_user">
        update users
        set withdraw=1
        where user_id = #{user_id}
    </update>

    <update id="change_profileimg">
        update users
        set profile_img=#{profile_img}
        where user_id=#{user_id}
    </update>

    <update id="change_basic_profileimg">
        update users
        set profile_img=#{profile_img}
        where user_id=#{user_id}
    </update>

    <select id="countSaveQuiz" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM save_quiz
        WHERE user_id = #{userid}
    </select>

    <select id="selectSaveQuiz" resultType="SaveQuizVO">
        select s.quiz_id, q.quiz_content, a.answer, q.level
        from save_quiz as s join quiz as q join answer as a
        on q.quiz_id = s.quiz_id and a.quiz_id = s.quiz_id
        where s.user_id = #{userid}
        ORDER BY s.quiz_id
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <delete id="deleteQuiz">
        DELETE FROM save_quiz
        WHERE quiz_id = #{quizId} AND user_id = #{userId}
    </delete>

    <delete id="deleteMsg">
        DELETE FROM save_message
        WHERE msg_id = #{msgId} AND save_user_id = #{userId}
    </delete>
</mapper>